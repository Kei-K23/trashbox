//go:build darwin
// +build darwin

/*
Copyright Â© 2024 Kei-K23 <arkar.dev.kei@gmail.com>
*/

package trashbox

import (
	"encoding/json"
	"os"
	"path/filepath"
)

type metadata struct {
	OriginalPath string `json:"original_path"`
}

// MoveToTrash moves the specified file or directory to the system's Trash directory.
// This function generates a metadata file in the Trash for potential recovery.
//
// Parameters:
//
//	path (string): The path of the file or directory to be moved to Trash.
//
// Returns:
//
//	error: Returns an error if the file cannot be moved to Trash or if there are issues
//	       in creating the metadata file. Returns nil if successful.
//
// Example usage:
//
//	err := MoveToTrash("/path/to/file.txt")
//	if err != nil {
//	    log.Fatalf("Failed to move file to Trash: %v", err)
//	}
//
// Notes:
//   - On success, a metadata file is created in the Trash directory that stores the
//     original location of the deleted file. This enables the file to be put back
//     using the PutBackFromTrash function.
//   - The function is currently tailored for macOS systems.
func MoveToTrash(path string) error {
	// Get the absolute file path of delete file
	absPath, err := filepath.Abs(path)
	if err != nil {
		return err
	}

	// Get the trash file path to move to .Trash directory
	trashPath := filepath.Join(os.Getenv("HOME"), ".Trash", filepath.Base(path))
	// Move the file to .Trash directory
	err = os.Rename(absPath, trashPath)
	if err != nil {
		return err
	}

	// Create metadata file for recovery the deleted file
	metadata := metadata{OriginalPath: absPath}
	metadataPath := trashPath + ".metadata.json"

	// Create metadata file in Trash bin
	metadataFile, err := os.Create(metadataPath)
	if err != nil {
		return err
	}
	defer metadataFile.Close()

	encoder := json.NewEncoder(metadataFile)
	err = encoder.Encode(metadata)
	if err != nil {
		return err
	}

	// Process is success and return nill
	return nil
}

// PutBackFromTrash restores a previously deleted file from the Trash to its original location.
// The original location is determined from the metadata generated when the file was moved to Trash.
//
// Parameters:
//
//	path (string): The name of the file or directory to be restored from Trash.
//
// Returns:
//
//	error: Returns an error if the file cannot be restored or if there are issues
//	       with reading the metadata file. Returns nil if successful.
//
// Example usage:
//
//	err := PutBackFromTrash("file.txt")
//	if err != nil {
//	    log.Fatalf("Failed to put back file from Trash: %v", err)
//	}
//
// Notes:
//   - The function depends on a metadata file (generated by MoveToTrash) being present
//     in the Trash directory, which contains the original path.
//   - On success, the metadata file is removed from the Trash.
func PutBackFromTrash(path string) error {
	// Get the Trash box path and metadata path
	trashPath := filepath.Join(os.Getenv("HOME"), ".Trash", path)
	metadataPath := trashPath + ".metadata.json"

	// Open metadata file to get original file path
	metadataFile, err := os.Open(metadataPath)
	if err != nil {
		return err
	}
	defer metadataFile.Close()

	var metadata metadata
	decoder := json.NewDecoder(metadataFile)
	err = decoder.Decode(&metadata)
	if err != nil {
		return err
	}

	// Put back file to original path
	err = os.Rename(trashPath, metadata.OriginalPath)
	if err != nil {
		return err
	}

	// Remove the metadata file
	err = os.Remove(metadataPath)
	if err != nil {
		return err
	}

	// Process is success and return nill
	return nil
}
